package com.o2.edh.processors;

import com.o2.edh.processors.mddif.validators.MDDIFManifestValidator;
import com.o2.edh.mddif.csv.CSVReader;
import com.o2.edh.mddif.csv.CSVRecordSetWriter;
import com.o2.edh.mddif.util.CSVUtils;
import org.apache.nifi.reporting.InitializationException;
import org.apache.nifi.schema.access.SchemaAccessUtils;
import org.apache.nifi.util.MockFlowFile;
import org.apache.nifi.util.TestRunner;
import org.apache.nifi.util.TestRunners;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

public class TestMDDIFManifestValidator {
    private TestRunner runner;

    @Before
    public void setup() throws InitializationException {
        runner = TestRunners.newTestRunner(MDDIFManifestValidator.class);
        //initialise controller service CSV reader with separator as '|'
        final CSVReader csvReader = new CSVReader();
        runner.addControllerService("record-reader", csvReader);
        runner.setProperty(csvReader, CSVUtils.VALUE_SEPARATOR, "|");
        runner.setProperty(csvReader, SchemaAccessUtils.SCHEMA_ACCESS_STRATEGY,SchemaAccessUtils.SCHEMA_TEXT_PROPERTY);
        runner.setProperty(csvReader, CSVUtils.QUOTE_MODE, CSVUtils.QUOTE_MINIMAL.getValue());
        runner.setProperty(csvReader, CSVUtils.TRAILING_DELIMITER, "false");
        runner.setProperty(csvReader,SchemaAccessUtils.SCHEMA_TEXT,"${table_schema}");
        runner.enableControllerService(csvReader);

        final CSVRecordSetWriter writer = new CSVRecordSetWriter();
        runner.addControllerService("record-writer", writer);
        runner.setProperty(writer, CSVUtils.VALUE_SEPARATOR,"|");
        runner.setProperty(writer, SchemaAccessUtils.SCHEMA_ACCESS_STRATEGY,SchemaAccessUtils.SCHEMA_TEXT_PROPERTY);
        runner.setProperty(writer, CSVUtils.QUOTE_MODE, CSVUtils.QUOTE_MINIMAL.getValue());
        runner.setProperty(writer, CSVUtils.TRAILING_DELIMITER, "false");
        runner.setProperty(writer, CSVUtils.INCLUDE_HEADER_LINE, "false");
        runner.setProperty(writer,SchemaAccessUtils.SCHEMA_TEXT,"${insert_table_schema}");
        runner.enableControllerService(writer);

        //set processor properties
        runner.setProperty(MDDIFManifestValidator.RECORD_READER, "record-reader");
        runner.setProperty(MDDIFManifestValidator.RECORD_WRITER, "record-writer");
        runner.setProperty(MDDIFManifestValidator.ALLOW_EXTRA_FIELDS, "false");
        runner.setProperty(MDDIFManifestValidator.STRICT_TYPE_CHECKING, "true");
    }

    @Test
    public void recordValidationSuccess() throws InitializationException, IOException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "none");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"record_id","type":"long"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="20|20190919022005\n" + "25|20190919022088";
        //runner.enqueue(Paths.get("C:\\Users\\yogesh.r.patel\\Documents\\data\\output\\abc.txt"),attributes);
        //create inflow file with attributes
        runner.enqueue(content, attributes);

       /* Date starttime = new Date();
        //run the test
        runner.run();
        Date endtime = new Date();
        System.out.println("start and end time:: " + starttime+" :: " + endtime);*/

        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 1);
        // runner.assertTransferCount(ManifestValidator.REL_INVALID, 1);

        //Validate file content and attributes
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_SUCCESS).get(0);

        final String expectedValidContents =
                "20|20190919022005\n" + "25|20190919022088";
        successFlowFile.assertContentEquals(expectedValidContents);
    }

    @Test
    public void recordValidationFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "none");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"record_id","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="20|20190919022005\n" + "2a5|20190919022088";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        // runner.assertTransferCount(ManifestValidator.REL_INVALID, 1);

        //Validate file content and attributes
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents =
                "20|20190919022005\n" + "2a5|20190919022088";
        failFlowFile.assertContentEquals(expectedValidContents);
    }

    @Test
    public void recordHeaderFooterSuccess() throws InitializationException, IOException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.ctrl");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("datafile_extension",".unl");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"record_id","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="3\n"+"20|20190919022005\n" + "27|20190919011188\n" + "25|20190919022088\n" +"footer";

        //create inflow file with attributes
        runner.enqueue(content, attributes);
        //runner.enqueue(Paths.get("C:\\Users\\yogesh.r.patel\\Documents\\data\\output\\abc.txt"),attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 1);
        // runner.assertTransferCount(ManifestValidator.REL_INVALID, 1);

        //Validate file content and attributes
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_SUCCESS).get(0);
        System.out.println(successFlowFile.toString());
        final String expectedValidContents ="3\n"+"20|20190919022005\n" + "27|20190919011188\n" + "25|20190919022088\n" +"footer";
        successFlowFile.assertContentEquals(expectedValidContents);

        MockFlowFile regexFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REGEX_CHECK).get(0);
        regexFlowFile.assertAttributeEquals("data_file_name", "abc.unl");
        regexFlowFile.assertAttributeEquals("data_sequence_number", "");
        regexFlowFile.assertAttributeEquals("data_file_size", "");
        regexFlowFile.assertAttributeEquals("data_record_count", "20");
        regexFlowFile.assertAttributeEquals("data_number_of_fields", "");
        regexFlowFile.assertAttributeEquals("data_start_date", "");
        regexFlowFile.assertAttributeEquals("data_end_date", "");
        regexFlowFile.assertAttributeEquals("data_Date_of_file_generation", "20190919022005");
    }

    @Test
    public void invalidAttributesFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "a");
        attributes.put("footer_record_count", "b");
        attributes.put("record_count_location", "nones");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "c");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"record_id","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="20|20190919022005\n" + "25|20190919022088";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        // runner.assertTransferCount(ManifestValidator.REL_INVALID, 1);

        //Validate file content and attributes
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents =
                "20|20190919022005\n" + "25|20190919022088";
        successFlowFile.assertContentEquals(expectedValidContents);
    }

    @Test
    public void verfSchemaValidationSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("datafile_extension",".unl.gz");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="2\n"+
                "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REGEX_CHECK, 2);

        //Validate file content and attributes
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "2\n"+
                "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);


        MockFlowFile regexFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REGEX_CHECK).get(0);
        regexFlowFile.assertAttributeEquals("data_file_name", "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz");
        regexFlowFile.assertAttributeEquals("data_sequence_number", "");
        regexFlowFile.assertAttributeEquals("data_file_size", "1395");
        regexFlowFile.assertAttributeEquals("data_record_count", "20");
        regexFlowFile.assertAttributeEquals("data_number_of_fields", "32");
        regexFlowFile.assertAttributeEquals("data_start_date", "20190918");
        regexFlowFile.assertAttributeEquals("data_end_date", "");
        regexFlowFile.assertAttributeEquals("data_Date_of_file_generation", "20190919022005");

    }

    @Test
    public void verfSchemaValidationFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="4\n"+
                "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1a395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1031_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1041_0_0.unl.gz|1395|20|32|20190918|20190919022005";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        Date starttime = new Date();
        //run the test
        runner.run();
        Date endtime = new Date();
        System.out.println("start and end time:: " + starttime+" :: " + endtime);

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
    }

    @Test
    public void ctrlSchemaValidationSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.ctrl");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("datafile_extension", ".unl");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"num_of_data_rows","type":"long"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="2\n"+
                "20|20190919022005\n" +
                "22|20190919022005";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REGEX_CHECK, 2);

        //Validate file content and attributes
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_SUCCESS).get(0);

        final String expectedValidContents ="2\n"+
                "20|20190919022005\n" +
                "22|20190919022005";
        successFlowFile.assertContentEquals(expectedValidContents);

        MockFlowFile regexFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REGEX_CHECK).get(0);
        regexFlowFile.assertAttributeEquals("data_file_name", "abc.unl");
        regexFlowFile.assertAttributeEquals("data_sequence_number", "");
        regexFlowFile.assertAttributeEquals("data_file_size", "");
        regexFlowFile.assertAttributeEquals("data_record_count", "20");
        regexFlowFile.assertAttributeEquals("data_number_of_fields", "");
        regexFlowFile.assertAttributeEquals("data_start_date", "");
        regexFlowFile.assertAttributeEquals("data_end_date", "");
        regexFlowFile.assertAttributeEquals("data_Date_of_file_generation", "20190919022005");


    }

    @Test
    public void ctrlSchemaValidationFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"num_of_data_rows","type":"long"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="2\n"+
                "20|20190919022005\n" +
                "2a2|20190919022005";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
    }

    @Test
    public void recordCountFooterSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "footer");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("datafile_extension",".unl.gz");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +"2\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REGEX_CHECK, 2);

        //Validate file content and attributes
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +"2\n";
        successFlowFile.assertContentEquals(expectedValidContents);


        MockFlowFile regexFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REGEX_CHECK).get(0);
        regexFlowFile.assertAttributeEquals("data_file_name", "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz");
        regexFlowFile.assertAttributeEquals("data_sequence_number", "");
        regexFlowFile.assertAttributeEquals("data_file_size", "1395");
        regexFlowFile.assertAttributeEquals("data_record_count", "20");
        regexFlowFile.assertAttributeEquals("data_number_of_fields", "32");
        regexFlowFile.assertAttributeEquals("data_start_date", "20190918");
        regexFlowFile.assertAttributeEquals("data_end_date", "");
        regexFlowFile.assertAttributeEquals("data_Date_of_file_generation", "20190919022005");

    }

    @Test
    public void recordCountFilenameSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "2_abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "filename");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("datafile_extension",".unl.gz");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REGEX_CHECK, 2);

        //Validate file content and attributes
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n\n";
        successFlowFile.assertContentEquals(expectedValidContents);


        MockFlowFile regexFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REGEX_CHECK).get(0);
        regexFlowFile.assertAttributeEquals("data_file_name", "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz");
        regexFlowFile.assertAttributeEquals("data_sequence_number", "");
        regexFlowFile.assertAttributeEquals("data_file_size", "1395");
        regexFlowFile.assertAttributeEquals("data_record_count", "20");
        regexFlowFile.assertAttributeEquals("data_number_of_fields", "32");
        regexFlowFile.assertAttributeEquals("data_start_date", "20190918");
        regexFlowFile.assertAttributeEquals("data_end_date", "");
        regexFlowFile.assertAttributeEquals("data_Date_of_file_generation", "20190919022005");

    }

    @Test
    public void recordCountNoneSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "none");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("datafile_extension",".unl.gz");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="header\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n"+"footer\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REGEX_CHECK, 2);

        //Validate file content and attributes
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "header\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n"+"footer\n";
        successFlowFile.assertContentEquals(expectedValidContents);


        MockFlowFile regexFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REGEX_CHECK).get(0);
        regexFlowFile.assertAttributeEquals("data_file_name", "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz");
        regexFlowFile.assertAttributeEquals("data_sequence_number", "");
        regexFlowFile.assertAttributeEquals("data_file_size", "1395");
        regexFlowFile.assertAttributeEquals("data_record_count", "20");
        regexFlowFile.assertAttributeEquals("data_number_of_fields", "32");
        regexFlowFile.assertAttributeEquals("data_start_date", "20190918");
        regexFlowFile.assertAttributeEquals("data_end_date", "");
        regexFlowFile.assertAttributeEquals("data_Date_of_file_generation", "20190919022005");

    }

    @Test
    public void invalidRecordCountLocationFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "invalid");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 0);
        runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        failFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test
    public void invalidHeaderCountFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "a");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "none");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 0);
        runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        failFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test
    public void invalidFooterCountFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "a");
        attributes.put("record_count_location", "none");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
      /*  {"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 0);
        runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        failFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test
    public void invalidRecordCountFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="a\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 0);
        runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 0);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents = "a\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        failFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test
    public void recordCountsDoNotMatchFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="3\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 0);
        runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 0);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents = "3\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        failFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test
    public void SuccessManifestVerfPGP() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "manifest.verf");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "none");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("datafile_extension",".unl.gz.pgp");

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REGEX_CHECK, 2);

        //Validate file content and attributes
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);


        MockFlowFile regexFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REGEX_CHECK).get(0);
        regexFlowFile.assertAttributeEquals("data_file_name", "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz.pgp");
        regexFlowFile.assertAttributeEquals("data_sequence_number", "");
        regexFlowFile.assertAttributeEquals("data_file_size", "1395");
        regexFlowFile.assertAttributeEquals("data_record_count", "20");
        regexFlowFile.assertAttributeEquals("data_number_of_fields", "32");
        regexFlowFile.assertAttributeEquals("data_start_date", "20190918");
        regexFlowFile.assertAttributeEquals("data_end_date", "");
        regexFlowFile.assertAttributeEquals("data_Date_of_file_generation", "20190919022005");

    }

    @Test
    public void SuccessManifestCtrlPGP() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "manifest.ctrl");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "none");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("datafile_extension",".unl.gz.pgp");

        //set flow file content
        final String content ="20|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REGEX_CHECK, 1);

        //Validate file content and attributes
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "20|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);


        MockFlowFile regexFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REGEX_CHECK).get(0);
        regexFlowFile.assertAttributeEquals("data_file_name", "manifest.unl.gz.pgp");
        regexFlowFile.assertAttributeEquals("data_sequence_number", "");
        regexFlowFile.assertAttributeEquals("data_file_size", "");
        regexFlowFile.assertAttributeEquals("data_record_count", "20");
        regexFlowFile.assertAttributeEquals("data_number_of_fields", "");
        regexFlowFile.assertAttributeEquals("data_start_date", "");
        regexFlowFile.assertAttributeEquals("data_end_date", "");
        regexFlowFile.assertAttributeEquals("data_Date_of_file_generation", "20190919022005");

    }

    //extra field and missing field

    //no insert_table_schema in attribute

    @Test
    public void noInsertTableSchemaFail() throws InitializationException, IOException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "none");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        //attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"record_id","type":"long"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="20|20190919022005\n" + "25|20190919022088";
        //runner.enqueue(Paths.get("C:\\Users\\yogesh.r.patel\\Documents\\data\\output\\abc.txt"),attributes);
        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 0);
        // runner.assertTransferCount(ManifestValidator.REL_INVALID, 1);

        //Validate file content and attributes
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents =
                "20|20190919022005\n" + "25|20190919022088";
        failFlowFile.assertContentEquals(expectedValidContents);
    }


    @Test   // addFileAndRecordID, header, footer, RC location header_metadata_and_footer, with more elements in header_metadata than actual data
    public void headerMetadataDateHandlingWithoutDocSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "footer");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("datafile_extension",".unl.gz");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_header\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\",\"doc\":\"Type inferred from 'cbs_bc_customer_all_20190709_0_101_0_0.unl.gz'\"},{\"name\":\"file_size\",\"type\":\"long\",\"doc\":\"Type inferred from '58022'\"},{\"name\":\"record_count\",\"type\":\"long\",\"doc\":\"Type inferred from '715'\"},{\"name\":\"num_of_fields\",\"type\":\"long\",\"doc\":\"Type inferred from '37'\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_header\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\",\"doc\":\"Type inferred from 'cbs_bc_customer_all_20190709_0_101_0_0.unl.gz'\"},{\"name\":\"file_size\",\"type\":\"long\",\"doc\":\"Type inferred from '58022'\"},{\"name\":\"record_count\",\"type\":\"long\",\"doc\":\"Type inferred from '715'\"},{\"name\":\"num_of_fields\",\"type\":\"long\",\"doc\":\"Type inferred from '37'\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        //set flow file content
        final String content =
                "cbs_bc_customer_all_20191120_0_101_0_0.unl.gz|3734|147|37|20191120|20191121022014\n" +
                        "cbs_bc_customer_all_20191120_0_1021_0_0.unl.gz|127548|1505|37|20191120|20191121022014\n" +
                        "cbs_bc_customer_all_20191120_0_1031_0_0.unl.gz|119343|1981|37|20191120|20191121022015\n" +
                        "3\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        //runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFManifestValidator.REGEX_CHECK, 3);
        //runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 3);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REGEX_CHECK).get(0);

        Map<String, String> writeAttributes = successFlowFile.getAttributes();
        for (Map.Entry<String,String> entry : writeAttributes.entrySet())
            if(entry.getKey().contains("data"))
                System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());

    }

    @Test   // addFileAndRecordID, header, footer, RC location header_metadata_and_footer, with more elements in header_metadata than actual data
    public void headerMetadataDateHandlingWithDocSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "footer");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("datafile_extension",".unl.gz");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_header\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\",\"doc\":\"Type inferred from 'cbs_bc_customer_all_20190709_0_101_0_0.unl.gz'\"},{\"name\":\"file_size\",\"type\":\"long\",\"doc\":\"Type inferred from '58022'\"},{\"name\":\"record_count\",\"type\":\"long\",\"doc\":\"Type inferred from '715'\"},{\"name\":\"num_of_fields\",\"type\":\"long\",\"doc\":\"Type inferred from '37'\"},{\"name\":\"data_start_date\",\"type\":\"string\",\"doc\":\"yyyyMMdd\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\",\"doc\":\"yyyyMMddHHmmss\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_header\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\",\"doc\":\"Type inferred from 'cbs_bc_customer_all_20190709_0_101_0_0.unl.gz'\"},{\"name\":\"file_size\",\"type\":\"long\",\"doc\":\"Type inferred from '58022'\"},{\"name\":\"record_count\",\"type\":\"long\",\"doc\":\"Type inferred from '715'\"},{\"name\":\"num_of_fields\",\"type\":\"long\",\"doc\":\"Type inferred from '37'\"},{\"name\":\"data_start_date\",\"type\":\"string\",\"doc\":\"yyyyMMdd\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\",\"doc\":\"yyyyMMddHHmmss\"}]}");

        //set flow file content
        final String content =
                "cbs_bc_customer_all_20191120_0_101_0_0.unl.gz|3734|147|37|20191120|20191121022014\n" +
                "cbs_bc_customer_all_20191120_0_1021_0_0.unl.gz|127548|1505|37|20191120|20191121022014\n" +
                "cbs_bc_customer_all_20191120_0_1031_0_0.unl.gz|119343|1981|37|20191120|20191121022015\n" +
                "3\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        //runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFManifestValidator.REGEX_CHECK, 3);
        //runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 3);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REGEX_CHECK).get(0);

        Map<String, String> writeAttributes = successFlowFile.getAttributes();
        for (Map.Entry<String,String> entry : writeAttributes.entrySet())
            if(entry.getKey().contains("data"))
                System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());

    }

    @Test   // addFileAndRecordID, header, footer, RC location header_metadata_and_footer, with more elements in header_metadata than actual data
    public void headerMetadataDateHandlingWithDocNoValueSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "footer");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("datafile_extension",".unl.gz");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_header\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\",\"doc\":\"Type inferred from 'cbs_bc_customer_all_20190709_0_101_0_0.unl.gz'\"},{\"name\":\"file_size\",\"type\":\"long\",\"doc\":\"Type inferred from '58022'\"},{\"name\":\"record_count\",\"type\":\"long\",\"doc\":\"Type inferred from '715'\"},{\"name\":\"num_of_fields\",\"type\":\"long\",\"doc\":\"Type inferred from '37'\"},{\"name\":\"data_start_date\",\"type\":\"string\",\"doc\":\"\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\",\"doc\":\"\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_header\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\",\"doc\":\"Type inferred from 'cbs_bc_customer_all_20190709_0_101_0_0.unl.gz'\"},{\"name\":\"file_size\",\"type\":\"long\",\"doc\":\"Type inferred from '58022'\"},{\"name\":\"record_count\",\"type\":\"long\",\"doc\":\"Type inferred from '715'\"},{\"name\":\"num_of_fields\",\"type\":\"long\",\"doc\":\"Type inferred from '37'\"},{\"name\":\"data_start_date\",\"type\":\"string\",\"doc\":\"\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\",\"doc\":\"\"}]}");

        //set flow file content
        final String content =
                "cbs_bc_customer_all_20191120_0_101_0_0.unl.gz|3734|147|37|20191120|20191121022014\n" +
                        "cbs_bc_customer_all_20191120_0_1021_0_0.unl.gz|127548|1505|37|20191120|20191121022014\n" +
                        "cbs_bc_customer_all_20191120_0_1031_0_0.unl.gz|119343|1981|37|20191120|20191121022015\n" +
                        "3\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        //runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFManifestValidator.REGEX_CHECK, 3);
        //runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 3);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REGEX_CHECK).get(0);

        Map<String, String> writeAttributes = successFlowFile.getAttributes();
        for (Map.Entry<String,String> entry : writeAttributes.entrySet())
            if(entry.getKey().contains("data"))
                System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());

    }

}
