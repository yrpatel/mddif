package com.o2.edh.processors;

import com.o2.edh.processors.mddif.validators.MDDIFDataValidator;
import com.o2.edh.processors.mddif.validators.MDDIFManifestValidator;
import com.o2.edh.mddif.csv.CSVReader;
import com.o2.edh.mddif.csv.CSVRecordSetWriter;
import com.o2.edh.mddif.util.CSVUtils;
import org.apache.nifi.reporting.InitializationException;
import org.apache.nifi.schema.access.SchemaAccessUtils;
import org.apache.nifi.util.MockFlowFile;
import org.apache.nifi.util.TestRunner;
import org.apache.nifi.util.TestRunners;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.nio.file.Paths;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

public class TestMDDIFDataValidator {
    private TestRunner runner;

    @Before
    public void setup() throws InitializationException {

        runner = TestRunners.newTestRunner(MDDIFDataValidator.class);
        //runner.setValidateExpressionUsage(false);
        //initialise controller service CSV reader with separator as '|'
        final CSVReader csvReader = new CSVReader();
        runner.addControllerService("record-reader", csvReader);
        runner.setProperty(csvReader, CSVUtils.VALUE_SEPARATOR, "|");
        runner.setProperty(csvReader, SchemaAccessUtils.SCHEMA_ACCESS_STRATEGY,SchemaAccessUtils.SCHEMA_TEXT_PROPERTY);
        runner.setProperty(csvReader, CSVUtils.QUOTE_MODE, CSVUtils.QUOTE_MINIMAL.getValue());
        runner.setProperty(csvReader, CSVUtils.TRAILING_DELIMITER, "false");
        runner.setProperty(csvReader,SchemaAccessUtils.SCHEMA_TEXT,"${table_schema}");

        runner.enableControllerService(csvReader);

        final CSVRecordSetWriter writer = new CSVRecordSetWriter();
        //runner.setValidateExpressionUsage(false);
        runner.addControllerService("record-writer", writer);
        runner.setProperty(writer, CSVUtils.VALUE_SEPARATOR,"|");
        runner.setProperty(writer, SchemaAccessUtils.SCHEMA_ACCESS_STRATEGY,SchemaAccessUtils.SCHEMA_TEXT_PROPERTY);
        runner.setProperty(writer, CSVUtils.QUOTE_MODE, CSVUtils.QUOTE_MINIMAL.getValue());
        runner.setProperty(writer, CSVUtils.TRAILING_DELIMITER, "false");
        runner.setProperty(writer, CSVUtils.INCLUDE_HEADER_LINE, "false");
        runner.setProperty(writer,SchemaAccessUtils.SCHEMA_TEXT,"${insert_table_schema}");

        runner.enableControllerService(writer);

        //set processor properties
        runner.setProperty(MDDIFDataValidator.RECORD_READER, "record-reader");
        runner.setProperty(MDDIFDataValidator.RECORD_WRITER, "record-writer");
        runner.setProperty(MDDIFDataValidator.ALLOW_EXTRA_FIELDS, "false");
        runner.setProperty(MDDIFDataValidator.STRICT_TYPE_CHECKING, "true");
    }

    //success unit tests
    @Test   // addFileAndRecordID, no header, no footer, RC location none
    public void addFileAndRecordIDSuccess() throws InitializationException, IOException {

        //runner.setValidateExpressionUsage(false);
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "none");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("metadata_record_count","2");
        attributes.put("field_separator","|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);
        //runner.enqueue(Paths.get("C:\\Users\\yogesh.r.patel\\Documents\\data\\performance\\input.unl"),attributes);

        //run the test
        Date starttime = new Date();
        //run the test
        runner.run();
        Date endtime = new Date();
        System.out.println("start and end time:: " + starttime+" :: " + endtime);

        runner.assertTransferCount(MDDIFDataValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataValidator.REL_SUCCESS).get(0);


        /*TestRunner putFileRunner = TestRunners.newTestRunner(PutFile.class);
        putFileRunner.enqueue(successFlowFile);
        putFileRunner.setProperty(PutFile.DIRECTORY,"C:\\Users\\yogesh.r.patel\\Documents\\data\\performance\\output\\");
        putFileRunner.setProperty(PutFile.CONFLICT_RESOLUTION,PutFile.REPLACE_RESOLUTION);
        putFileRunner.run();*/

        final String expectedValidContents = "123|1|cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "123|2|cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // no addFileAndRecordID, no header, no footer, RC location none
    public void noAddFileAndRecordIDSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "none");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("metadata_record_count","2");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // no addFileAndRecordID, 1 header, no footer, RC location header
    public void recordCountHeaderSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("metadata_record_count","2");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="header\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // no addFileAndRecordID, no header, 1 footer, RC location footer
    public void recordCountFooterSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "footer");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("metadata_record_count","2");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n"+"footer";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // no addFileAndRecordID, 1 header, 1 footer, RC location header
    public void recordCountHeaderFooterSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("metadata_record_count","2");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="header\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n"+"footer";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // no addFileAndRecordID, no header, no footer, RC location filename
    public void recordCountFilenameSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "2_abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "filename");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("metadata_record_count","2");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // addFileAndRecordID, 1 header, no footer, RC location header
    public void addFileAndRecordIDRCHeaderSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("metadata_record_count","2");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="header\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "123|1|cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "123|2|cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // addFileAndRecordID, no header, 1 footer, RC location footer
    public void addFileAndRecordIDRCFooterSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "footer");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("metadata_record_count","2");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n"+"footer";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "123|1|cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "123|2|cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // addFileAndRecordID, 1 header, 1 footer, RC location header
    public void addFileAndRecordIDRCHeaderFooterSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("metadata_record_count","2");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="header\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n"+"footer";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "123|1|cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "123|2|cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

    }


    // fail unit tests
    @Test   //invalid data type in the record
    public void recordValidationFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "none");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("metadata_record_count","2");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"record_id","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="20|20190919022005\n" + "2a5|20190919022088";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        // runner.assertTransferCount(ManifestValidator.REL_INVALID, 1);

        //Validate file content and attributes
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents =
                "20|20190919022005\n" + "2a5|20190919022088";
        failFlowFile.assertContentEquals(expectedValidContents);
    }

    @Test   // invalid header_record_count, footer_record_count, add_file_and_record_id, record_count_location
    public void invalidAttributesFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "a");
        attributes.put("footer_record_count", "b");
        attributes.put("record_count_location", "nones");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "c");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("metadata_record_count","2");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"record_id","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="20|20190919022005\n" + "25|20190919022088";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        // runner.assertTransferCount(ManifestValidator.REL_INVALID, 1);

        //Validate file content and attributes
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents =
                "20|20190919022005\n" + "25|20190919022088";
        successFlowFile.assertContentEquals(expectedValidContents);
    }

    @Test   // invalid record_count_location
    public void invalidRecordCountLocationFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "invalid");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("metadata_record_count","2");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 0);
        runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        failFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // invalid header_record_count
    public void invalidHeaderCountFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "a");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("metadata_record_count","2");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 0);
        runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        failFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // invalid footer_record_count
    public void invalidFooterCountFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "a");
        attributes.put("record_count_location", "footer");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("metadata_record_count","2");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
      /*  {"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 0);
        runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        failFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // invalid record count received
    public void invalidRecordCountFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("metadata_record_count","2a");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="header\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 0);
        runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents = "header\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        failFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // actual and received record count do not match
    public void recordCountsDoNotMatchFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("metadata_record_count","3");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="3\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 0);
        runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 0);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents = "3\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        failFlowFile.assertContentEquals(expectedValidContents);

    }

    //header footer mentioned but not in file content
    //extra fields less fields


    @Test   // actual and received record count do not match
    public void recordMalformedFail() throws InitializationException, IOException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "input.unl");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("metadata_record_count","2");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_offering_inst\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"offer_subs_inst_id\",\"type\":\"long\",\"doc\":\"Type inferred from '14003'\"},{\"name\":\"owner_reg_cust_id\",\"type\":\"long\",\"doc\":\"Type inferred from '100000000000014111'\"},{\"name\":\"offer_id\",\"type\":\"long\",\"doc\":\"Type inferred from '1712144776'\"},{\"name\":\"purchase_seq_number\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '14003'\"},{\"name\":\"primary_offer_flag\",\"type\":\"string\",\"doc\":\"Type inferred from 'P'\"},{\"name\":\"offer_bundle_flag\",\"type\":\"string\",\"doc\":\"Type inferred from 'S'\"},{\"name\":\"offer_class\",\"type\":\"string\",\"doc\":\"Type inferred from 'I'\"},{\"name\":\"parent_offer_inst_id\",\"type\":[\"null\",\"long\"],\"doc\":\"Type inferred from '1'\"},{\"name\":\"rel_offer_subs_inst_id\",\"type\":[\"null\",\"long\"],\"doc\":\"Type inferred from '1'\"},{\"name\":\"rel_grp_id\",\"type\":[\"null\",\"long\"],\"doc\":\"Type inferred from '1'\"},{\"name\":\"subs_owner_entity\",\"type\":\"string\",\"doc\":\"Type inferred from 'S'\"},{\"name\":\"subs_owner_entity_id\",\"type\":\"long\",\"doc\":\"Type inferred from '100000000000014112'\"},{\"name\":\"sales_chnl_type\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '1'\"},{\"name\":\"sales_chnl_id\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '225801'\"},{\"name\":\"sales_id\",\"type\":[\"null\",\"long\"],\"doc\":\"Type inferred from '22580101'\"},{\"name\":\"activation_mode\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'A'\"},{\"name\":\"activation_limit_time\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '20370101000000'\"},{\"name\":\"activation_date\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '20190325143915'\"},{\"name\":\"trial_begin_date\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'null'\",\"default\":null},{\"name\":\"trial_end_date\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'null'\",\"default\":null},{\"name\":\"status\",\"type\":\"string\",\"doc\":\"Type inferred from '2'\"},{\"name\":\"suspend_detail\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '000000000000000000000000'\"},{\"name\":\"status_change_time\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '20190325143915'\"},{\"name\":\"effective_date\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '20190325143613'\"},{\"name\":\"exp_date\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '20370101000000'\"},{\"name\":\"creator_id\",\"type\":[\"null\",\"long\"],\"doc\":\"Type inferred from '101'\"},{\"name\":\"creator_dept\",\"type\":[\"null\",\"long\"],\"doc\":\"Type inferred from '101'\"},{\"name\":\"creation_time\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '20190325143613'\"},{\"name\":\"last_modif_oper_id\",\"type\":[\"null\",\"long\"],\"doc\":\"Type inferred from '102'\"},{\"name\":\"dept_modif_oper\",\"type\":[\"null\",\"long\"],\"doc\":\"Type inferred from '101'\"},{\"name\":\"last_modif_time\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '20190325143915'\"},{\"name\":\"home_be_id\",\"type\":\"long\",\"doc\":\"Type inferred from '101'\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_offering_inst\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\",\"doc\":\"Type inferred from '108-126270d3-380b-4467-a33b-1af280e99d6d'\"},{\"name\":\"record_id\",\"type\":\"long\",\"doc\":\"Type inferred from '20190423094556'\"},{\"name\":\"offer_subs_inst_id\",\"type\":\"long\",\"doc\":\"Type inferred from '14003'\"},{\"name\":\"owner_reg_cust_id\",\"type\":\"long\",\"doc\":\"Type inferred from '100000000000014111'\"},{\"name\":\"offer_id\",\"type\":\"long\",\"doc\":\"Type inferred from '1712144776'\"},{\"name\":\"purchase_seq_number\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '14003'\"},{\"name\":\"primary_offer_flag\",\"type\":\"string\",\"doc\":\"Type inferred from 'P'\"},{\"name\":\"offer_bundle_flag\",\"type\":\"string\",\"doc\":\"Type inferred from 'S'\"},{\"name\":\"offer_class\",\"type\":\"string\",\"doc\":\"Type inferred from 'I'\"},{\"name\":\"parent_offer_inst_id\",\"type\":[\"null\",\"long\"],\"doc\":\"Type inferred from '1'\"},{\"name\":\"rel_offer_subs_inst_id\",\"type\":[\"null\",\"long\"],\"doc\":\"Type inferred from '1'\"},{\"name\":\"rel_grp_id\",\"type\":[\"null\",\"long\"],\"doc\":\"Type inferred from '1'\"},{\"name\":\"subs_owner_entity\",\"type\":\"string\",\"doc\":\"Type inferred from 'S'\"},{\"name\":\"subs_owner_entity_id\",\"type\":\"long\",\"doc\":\"Type inferred from '100000000000014112'\"},{\"name\":\"sales_chnl_type\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '1'\"},{\"name\":\"sales_chnl_id\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '225801'\"},{\"name\":\"sales_id\",\"type\":[\"null\",\"long\"],\"doc\":\"Type inferred from '22580101'\"},{\"name\":\"activation_mode\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'A'\"},{\"name\":\"activation_limit_time\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '20370101000000'\"},{\"name\":\"activation_date\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '20190325143915'\"},{\"name\":\"trial_begin_date\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'null'\",\"default\":null},{\"name\":\"trial_end_date\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'null'\",\"default\":null},{\"name\":\"status\",\"type\":\"string\",\"doc\":\"Type inferred from '2'\"},{\"name\":\"suspend_detail\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '000000000000000000000000'\"},{\"name\":\"status_change_time\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '20190325143915'\"},{\"name\":\"effective_date\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '20190325143613'\"},{\"name\":\"exp_date\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '20370101000000'\"},{\"name\":\"creator_id\",\"type\":[\"null\",\"long\"],\"doc\":\"Type inferred from '101'\"},{\"name\":\"creator_dept\",\"type\":[\"null\",\"long\"],\"doc\":\"Type inferred from '101'\"},{\"name\":\"creation_time\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '20190325143613'\"},{\"name\":\"last_modif_oper_id\",\"type\":[\"null\",\"long\"],\"doc\":\"Type inferred from '102'\"},{\"name\":\"dept_modif_oper\",\"type\":[\"null\",\"long\"],\"doc\":\"Type inferred from '101'\"},{\"name\":\"last_modif_time\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '20190325143915'\"},{\"name\":\"home_be_id\",\"type\":\"long\",\"doc\":\"Type inferred from '101'\"}]}");

        //set flow file content
        /*final String content ="45114|100000000000047390|11000|45114|P|S|I||||S|100000000000047391|1|225801|22580101|A||20191118173442|||2|000000000000000000000000|20191118173442|20191118173442|20370101000000|101|101|20191118173442||||1021\n" +
        "45146|100000000000047518|11000|45146|P|S|I||||S|100000000000047519|1|225801|22580101|A||20191118184406|||2|000000000000000000000000|20191118184406|20191118184406|20370101000000|101|101|20191118184406||||1021";*/

        //create inflow file with attributes
        //runner.enqueue(content, attributes);
        final String content = "3\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        runner.enqueue(content,attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFDataValidator.REL_SUCCESS, 0);
     //   runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFDataValidator.REL_FAILURE).get(0);

        final String expectedValidContents = "3\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        failFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // invalid record count received
    public void dateConversionTest() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("metadata_record_count","4");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"table_name\",\"doc\":\"Schema\",\"fields\":[{ \"name\": \"name\",\"type\":\"string\"},{ \"name\": \"deptartment\",\"type\":\"int\"},{ \"name\" : \"date_of_joining\", \"type\": \"long\", \"logicalType\": \"date\",\"doc\":\"yyyyMMdd\"},{ \"name\" : \"last_login\", \"type\": \"long\", \"logicalType\": \"timestamp-millis\",\"doc\":\"yyyyMMddHHmmss\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"table_name\",\"doc\":\"Schema\",\"fields\":[{ \"name\": \"name\",\"type\":\"string\"},{ \"name\": \"deptartment\",\"type\":\"int\"},{ \"name\" : \"date_of_joining\", \"type\": \"long\", \"logicalType\": \"date\",\"doc\":\"yyyyMMdd\"},{ \"name\" : \"last_login\", \"type\": \"long\", \"logicalType\": \"timestamp-millis\",\"doc\":\"yyyyMMddHHmmss\"}]}");

        //set flow file content
        final String content ="yogesh|111|20131106|20200130130000\n" +
                "chaitali|112|20151106|20200130120030\n" +
                "pratik|111|20161106|20200130110040\n" +
                "ambika|112|20171106|20200130100250";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 1);
      //  runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "yogesh|111|1383676200000|1580369400000\n" +
                "chaitali|112|1446748200000|1580365830000\n" +
                "pratik|111|1478370600000|1580362240000\n" +
                "ambika|112|1509906600000|1580358770000\n";
        failFlowFile.assertContentEquals(expectedValidContents);

    }



    @Test
    public void headerMetadataDateHandlingWithDocSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "cbs_bc_customer.unl");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "none");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "uuid123");
        attributes.put("file_id", "22222222");
        attributes.put("metadata_record_count","10");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("field_separator","|");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"nuc_o2aaic_urm_012\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"OPERATOR_ID\",\"type\":\"string\"},{\"name\":\"BILLING_CYCLE_CLOSE_DT\",\"type\":\"long\",\"logicalType\":\"date\",\"doc\":\"yyyyMMdd\"},{\"name\":\"BILLING_CYCLEID\",\"type\":\"string\"},{\"name\":\"BILLING_CYCLE_DES\",\"type\":[\"null\",\"string\"]},{\"name\":\"BILLING_CYCLE_START_DT\",\"type\":\"long\",\"logicalType\":\"date\",\"doc\":\"yyyyMMdd\"},{\"name\":\"BILLING_CYCLE_END_DT\",\"type\":\"long\",\"logicalType\":\"date\",\"doc\":\"yyyyMMdd\"},{\"name\":\"BILLING_DUE_DT\",\"type\":\"long\",\"logicalType\":\"date\",\"doc\":\"yyyyMMdd\"},{\"name\":\"BILLING_RV_COMPUTES_CD\",\"type\":[\"null\",\"string\"]}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"nuc_o2aaic_urm_012\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"OPERATOR_ID\",\"type\":\"string\"},{\"name\":\"BILLING_CYCLE_CLOSE_DT\",\"type\":\"long\",\"logicalType\":\"date\",\"doc\":\"yyyyMMdd\"},{\"name\":\"BILLING_CYCLEID\",\"type\":\"string\"},{\"name\":\"BILLING_CYCLE_DES\",\"type\":[\"null\",\"string\"]},{\"name\":\"BILLING_CYCLE_START_DT\",\"type\":\"long\",\"logicalType\":\"date\",\"doc\":\"yyyyMMdd\"},{\"name\":\"BILLING_CYCLE_END_DT\",\"type\":\"long\",\"logicalType\":\"date\",\"doc\":\"yyyyMMdd\"},{\"name\":\"BILLING_DUE_DT\",\"type\":\"long\",\"logicalType\":\"date\",\"doc\":\"yyyyMMdd\"},{\"name\":\"BILLING_RV_COMPUTES_CD\",\"type\":[\"null\",\"string\"]}]}");


        //set flow file content
        final String content ="234-10|20200601|200421200603200604200618|Billed on 20200604|20200421|20200603|20200618|0\n" +
                "234-10|20200601|200601200603200604200618|Billed on 20200604|20200601|20200603|20200618|0\n" +
                "234-10|20200601|200601200603200604200604|Billed on 20200604|20200601|20200603|20200604|0\n" +
                "234-10|20200601|200525200603200604200618|Billed on 20200604|20200525|20200603|20200618|0\n" +
                "234-10|20200601|200409200603200604200618|Billed on 20200604|20200409|20200603|20200618|0\n" +
                "234-10|20200601|200518200603200604200618|Billed on 20200604|20200518|20200603|20200618|0\n" +
                "234-10|20200601|200415200603200604200618|Billed on 20200604|20200415|20200603|20200618|0\n" +
                "234-10|20200601|200420200603200604200618|Billed on 20200604|20200420|20200603|20200618|0\n" +
                "234-10|20200601|200424200603200604200618|Billed on 20200604|20200424|20200603|20200618|0\n" +
                "234-10|20200601|200326200603200604200618|Billed on 20200604|20200326|20200603|20200618|0";

        final String expectedContent= "234-10|1590949800000|200421200603200604200618|Billed on 20200604|1587407400000|1591122600000|1592418600000|0\n" +
                "234-10|1590949800000|200601200603200604200618|Billed on 20200604|1590949800000|1591122600000|1592418600000|0\n" +
                "234-10|1590949800000|200601200603200604200604|Billed on 20200604|1590949800000|1591122600000|1591209000000|0\n" +
                "234-10|1590949800000|200525200603200604200618|Billed on 20200604|1590345000000|1591122600000|1592418600000|0\n" +
                "234-10|1590949800000|200409200603200604200618|Billed on 20200604|1586370600000|1591122600000|1592418600000|0\n" +
                "234-10|1590949800000|200518200603200604200618|Billed on 20200604|1589740200000|1591122600000|1592418600000|0\n" +
                "234-10|1590949800000|200415200603200604200618|Billed on 20200604|1586889000000|1591122600000|1592418600000|0\n" +
                "234-10|1590949800000|200420200603200604200618|Billed on 20200604|1587321000000|1591122600000|1592418600000|0\n" +
                "234-10|1590949800000|200424200603200604200618|Billed on 20200604|1587666600000|1591122600000|1592418600000|0\n" +
                "234-10|1590949800000|200326200603200604200618|Billed on 20200604|1585161000000|1591122600000|1592418600000|0\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataValidator.REL_SUCCESS).get(0);

        Map<String, String> writeAttributes = successFlowFile.getAttributes();
        for (Map.Entry<String,String> entry : writeAttributes.entrySet())
            System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());
           // if(entry.getKey().contains("metadata"))

        successFlowFile.assertContentEquals(expectedContent);

    }


}
