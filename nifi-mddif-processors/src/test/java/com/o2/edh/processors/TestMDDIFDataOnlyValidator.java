package com.o2.edh.processors;

import com.o2.edh.processors.mddif.validators.MDDIFDataOnlyValidator;
import com.o2.edh.processors.mddif.validators.MDDIFManifestValidator;
import com.o2.edh.mddif.csv.CSVReader;
import com.o2.edh.mddif.csv.CSVRecordSetWriter;
import com.o2.edh.mddif.util.CSVUtils;
import org.apache.nifi.reporting.InitializationException;
import org.apache.nifi.schema.access.SchemaAccessUtils;
import org.apache.nifi.util.MockFlowFile;
import org.apache.nifi.util.TestRunner;
import org.apache.nifi.util.TestRunners;
import org.junit.Before;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class TestMDDIFDataOnlyValidator {
    private TestRunner runner;

    @Before
    public void setup() throws InitializationException {
        runner = TestRunners.newTestRunner(MDDIFDataOnlyValidator.class);
        //initialise controller service CSV reader with separator as '|'
        final CSVReader csvReader = new CSVReader();
        runner.addControllerService("record-reader", csvReader);
        runner.setProperty(csvReader, CSVUtils.VALUE_SEPARATOR, "|");
        runner.setProperty(csvReader, SchemaAccessUtils.SCHEMA_ACCESS_STRATEGY,SchemaAccessUtils.SCHEMA_TEXT_PROPERTY);
        runner.setProperty(csvReader, CSVUtils.QUOTE_MODE, CSVUtils.QUOTE_MINIMAL.getValue());
        runner.setProperty(csvReader, CSVUtils.TRAILING_DELIMITER, "false");
        runner.setProperty(csvReader,SchemaAccessUtils.SCHEMA_TEXT,"${table_schema}");
        runner.enableControllerService(csvReader);

        final CSVRecordSetWriter writer = new CSVRecordSetWriter();
        runner.addControllerService("record-writer", writer);
        runner.setProperty(writer, CSVUtils.VALUE_SEPARATOR,"|");
        runner.setProperty(writer, SchemaAccessUtils.SCHEMA_ACCESS_STRATEGY,SchemaAccessUtils.SCHEMA_TEXT_PROPERTY);
        runner.setProperty(writer, CSVUtils.QUOTE_MODE, CSVUtils.QUOTE_MINIMAL.getValue());
        runner.setProperty(writer, CSVUtils.TRAILING_DELIMITER, "false");
        runner.setProperty(writer, CSVUtils.INCLUDE_HEADER_LINE, "false");
        runner.setProperty(writer,SchemaAccessUtils.SCHEMA_TEXT,"${insert_table_schema}");
        runner.enableControllerService(writer);

        //set processor properties
        runner.setProperty(MDDIFDataOnlyValidator.RECORD_READER, "record-reader");
        runner.setProperty(MDDIFDataOnlyValidator.RECORD_WRITER, "record-writer");
        runner.setProperty(MDDIFDataOnlyValidator.ALLOW_EXTRA_FIELDS, "false");
        runner.setProperty(MDDIFDataOnlyValidator.STRICT_TYPE_CHECKING, "true");
    }

    //success unit tests
    @Test   // addFileAndRecordID, no header, no footer, RC location none
    public void addFileAndRecordIDSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "none");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "123|1|cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "123|2|cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // no addFileAndRecordID, no header, no footer, RC location none
    public void noAddFileAndRecordIDSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "none");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // no addFileAndRecordID, 1 header, no footer, RC location header
    public void recordCountHeaderSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="2\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // no addFileAndRecordID, no header, 1 footer, RC location footer
    public void recordCountFooterSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "footer");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n"+"2";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // no addFileAndRecordID, 1 header, 1 footer, RC location header
    public void recordCountHeaderFooterSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="2\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n"+"2";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // no addFileAndRecordID, no header, no footer, RC location filename
    public void recordCountFilenameSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "2_abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "filename");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // addFileAndRecordID, 1 header, no footer, RC location header
    public void addFileAndRecordIDRCHeaderSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="2\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "123|1|cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "123|2|cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // addFileAndRecordID, no header, 1 footer, RC location footer
    public void addFileAndRecordIDRCFooterSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "footer");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n"+"2";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 1);
        //runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 3);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "123|1|cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "123|2|cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // addFileAndRecordID, 1 header, 1 footer, RC location header
    public void addFileAndRecordIDRCHeaderFooterSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="2\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n"+"footer";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 1);
        //runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 3);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "123|1|cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "123|2|cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

    }


    // fail unit tests
    @Test   //invalid data type in the record
    public void recordValidationFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "none");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"record_id","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="20|20190919022005\n" + "2a5|20190919022088";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        // runner.assertTransferCount(ManifestValidator.REL_INVALID, 1);

        //Validate file content and attributes
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents =
                "20|20190919022005\n" + "2a5|20190919022088";
        failFlowFile.assertContentEquals(expectedValidContents);
    }

    @Test   // invalid header_record_count, footer_record_count, add_file_and_record_id, record_count_location
    public void invalidAttributesFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "a");
        attributes.put("footer_record_count", "b");
        attributes.put("record_count_location", "nones");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "c");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"record_id","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="20|20190919022005\n" + "25|20190919022088";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        // runner.assertTransferCount(ManifestValidator.REL_INVALID, 1);

        //Validate file content and attributes
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents =
                "20|20190919022005\n" + "25|20190919022088";
        successFlowFile.assertContentEquals(expectedValidContents);
    }

    @Test   // invalid record_count_location
    public void invalidRecordCountLocationFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "invalid");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 0);
        runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        failFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // invalid header_record_count
    public void invalidHeaderCountFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "a");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 0);
        runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        failFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // invalid footer_record_count
    public void invalidFooterCountFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "a");
        attributes.put("record_count_location", "footer");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
      /*  {"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 0);
        runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents = "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        failFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // invalid record count received
    public void invalidRecordCountFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="a\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 0);
        runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 0);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents = "a\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        failFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // actual and received record count do not match
    public void recordCountsDoNotMatchFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "0");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        /*{"type":"record","name":"ocs_bc_customer_manifest","doc":"Schema generated by Kite","fields":
        [
        {"name":"file_name","type":"string"},
        {"name":"file_size","type":"long"},
        {"name":"num_of_data_rows","type":"long"},
        {"name":"num_of_fields","type":"long"},
        {"name":"date_of_data","type":"string"},
        {"name":"date_of_file_gen","type":"string"}
        ]
        }*/

        //set flow file content
        final String content ="3\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFManifestValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFManifestValidator.REL_SUCCESS, 0);
        runner.assertTransferCount(MDDIFManifestValidator.LOG_RELATIONSHIP, 0);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFManifestValidator.REL_FAILURE).get(0);

        final String expectedValidContents = "3\n"+"cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        failFlowFile.assertContentEquals(expectedValidContents);

    }


    //header schema unit tests
    //success unit tests
    @Test   // addFileAndRecordID, header, no footer, RC location header_metadata, with less elements in header_metadata than actual data
    public void headerMetadataSchemaLessSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header_metadata"); //filename, header, footer, none, header_metadata, header_metadata_and_footer
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("header_schema","{\"type\":\"record\",\"name\":\"header_schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"sequence_number\",\"type\":\"long\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_end_date\",\"type\":\"string\",\"doc\":\"[dd-MMM-yy],[HH:mm:ss]\"}]}");
        attributes.put("metadata_header_record","1");   //

        //set flow file content
        final String content =   // header_metadata 20193112
                "abc.txt|01|12|2|6|[21-JAN-20],[13:14:15]\n"+
                "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +   //data
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";    //data

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 1);
        //runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "123|1|cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "123|2|cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

        Map<String, String> writeAttributes = successFlowFile.getAttributes();
        for (Map.Entry<String,String> entry : writeAttributes.entrySet())
            System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());

//        successFlowFile.assertAttributeEquals("metadata_file_name", "abc.txt");
//        successFlowFile.assertAttributeEquals("metadata_sequence_number", "1");
//        successFlowFile.assertAttributeEquals("metadata_file_size", "12");
//        successFlowFile.assertAttributeEquals("metadata_record_count", "2");
//        successFlowFile.assertAttributeEquals("metadata_number_of_fields", "6");
//        successFlowFile.assertAttributeEquals("metadata_end_date", "");
//        successFlowFile.assertAttributeEquals("metadata_start_date", "20200121131415");
//        successFlowFile.assertAttributeEquals("metadata_Date_of_file_generation", "");

    }

    @Test   // addFileAndRecordID, header, no footer, RC location header_metadata, with more elements in header_metadata than actual data
    public void headerMetadataSchemaMoreSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header_metadata");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("header_schema","{\"type\":\"record\",\"name\":\"header_schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"sequence_number\",\"type\":\"long\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_end_date\",\"type\":\"string\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}"); //
        attributes.put("metadata_header_record","1");

        //set flow file content
        final String content ="abc.txt|01|12|2|6|20193112|20192912|20193012\n"+
                "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "123|1|cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "123|2|cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

        Map<String, String> writeAttributes = successFlowFile.getAttributes();
        for (Map.Entry<String,String> entry : writeAttributes.entrySet())
            System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());

        successFlowFile.assertAttributeEquals("metadata_file_name", "abc.txt");
        successFlowFile.assertAttributeEquals("metadata_sequence_number", "1");
        successFlowFile.assertAttributeEquals("metadata_file_size", "12");
        successFlowFile.assertAttributeEquals("metadata_record_count", "2");
        successFlowFile.assertAttributeEquals("metadata_number_of_fields", "6");
        successFlowFile.assertAttributeEquals("metadata_end_date", "20193112");
        successFlowFile.assertAttributeEquals("metadata_start_date", "20192912");
        successFlowFile.assertAttributeEquals("metadata_Date_of_file_generation", "20193012");

    }

    @Test   // addFileAndRecordID, header, footer, RC location header_metadata_and_footer, with less elements in header_metadata than actual data
    public void headerMetadataFooterSchemaLessLessSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "header_metadata_and_footer");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("header_schema","{\"type\":\"record\",\"name\":\"header_schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"sequence_number\",\"type\":\"long\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_end_date\",\"type\":\"string\"}]}"); //,{"name":"data_start_date","type":"string"},{"name":"date_of_file_generation","type":"string"}
        attributes.put("metadata_header_record","1");

        //set flow file content
        final String content ="abc.txt|01|12|2|6|20193112\n"+
                "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "2\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "123|1|cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "123|2|cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

        Map<String, String> writeAttributes = successFlowFile.getAttributes();
        for (Map.Entry<String,String> entry : writeAttributes.entrySet())
            System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());

        successFlowFile.assertAttributeEquals("metadata_file_name", "abc.txt");
        successFlowFile.assertAttributeEquals("metadata_sequence_number", "1");
        successFlowFile.assertAttributeEquals("metadata_file_size", "12");
        successFlowFile.assertAttributeEquals("metadata_record_count", "2");
        successFlowFile.assertAttributeEquals("metadata_number_of_fields", "6");
        successFlowFile.assertAttributeEquals("metadata_end_date", "20193112");
        successFlowFile.assertAttributeEquals("metadata_start_date", "");
        successFlowFile.assertAttributeEquals("metadata_Date_of_file_generation", "");

    }

    @Test   // addFileAndRecordID, header, footer, RC location header_metadata_and_footer, with more elements in header_metadata than actual data
    public void headerMetadataFooterSchemaMoreSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "header_metadata_and_footer");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("header_schema","{\"type\":\"record\",\"name\":\"header_schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"sequence_number\",\"type\":\"long\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_end_date\",\"type\":\"string\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}"); //
        attributes.put("metadata_header_record","1");

        //set flow file content
        final String content ="abc.txt|01|12|2|6|20193112|20192912|20193012\n"+
                "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "2\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "123|1|cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "123|2|cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

        Map<String, String> writeAttributes = successFlowFile.getAttributes();
        for (Map.Entry<String,String> entry : writeAttributes.entrySet())
            System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());

        successFlowFile.assertAttributeEquals("metadata_file_name", "abc.txt");
        successFlowFile.assertAttributeEquals("metadata_sequence_number", "1");
        successFlowFile.assertAttributeEquals("metadata_file_size", "12");
        successFlowFile.assertAttributeEquals("metadata_record_count", "2");
        successFlowFile.assertAttributeEquals("metadata_number_of_fields", "6");
        successFlowFile.assertAttributeEquals("metadata_end_date", "20193112");
        successFlowFile.assertAttributeEquals("metadata_start_date", "20192912");
        successFlowFile.assertAttributeEquals("metadata_Date_of_file_generation", "20193012");

    }

    @Test   // addFileAndRecordID, header, no footer, RC location header_metadata_and_footer, with no record_count in metadata schema but present in footer.
    public void headerMetadataFooterSchemaNoRecordCountSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "header_metadata_and_footer");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("header_schema","{\"type\":\"record\",\"name\":\"header_schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"sequence_number\",\"type\":\"long\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_end_date\",\"type\":\"string\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}"); //
        attributes.put("metadata_header_record","1");

        //set flow file content
        final String content ="abc.txt|01|12|6|20193112|20192912|20193012\n"+
                "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "2\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 1);
        runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "123|1|cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n"+
                "123|2|cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        failFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // addFileAndRecordID, header, no footer, RC location header_metadata, with more elements in header_metadata than actual data and additional field than expected.
    public void headerMetadataSchemaMoreAdditionalFieldFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header_metadata");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("header_schema","{\"type\":\"record\",\"name\":\"header_schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"sequence_number\",\"type\":\"long\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_end_date\",\"type\":\"string\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}"); //
        attributes.put("metadata_header_record","1");

        //set flow file content
        final String content ="abc.txt|01|12|2|6|20193112|20192912|20193012|AdditionalField1\n"+ //9
                "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" + //6
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 0);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_FAILURE).get(0);

        final String expectedValidContents = "abc.txt|01|12|2|6|20193112|20192912|20193012|AdditionalField1\n"+
                "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        failFlowFile.assertContentEquals(expectedValidContents);



    }

    @Test   // addFileAndRecordID, header, no footer, RC location header_metadata, with invalid data types.
    public void headerMetadataSchemaInvalidDatatypeFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header_metadata");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("header_schema","{\"type\":\"record\",\"name\":\"header_schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"sequence_number\",\"type\":\"long\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_end_date\",\"type\":\"string\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}"); //
        attributes.put("metadata_header_record","1");
        attributes.put("file_uuid_or_id", "file_uuid");

        //set flow file content
        final String content ="abc.txt|01|12|2|6a|20193112|20192912|20193012\n"+
                "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 0);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_FAILURE).get(0);

        Map<String, String> writeAttributes = failFlowFile.getAttributes();
        for (Map.Entry<String,String> entry : writeAttributes.entrySet())
            System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());

        final String expectedValidContents = "abc.txt|01|12|2|6a|20193112|20192912|20193012\n"+
                "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        failFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // addFileAndRecordID, header, no footer, RC location header_metadata, with no record_count in metadata schema.
    public void headerMetadataSchemaNoRecordCountFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "0");
        attributes.put("record_count_location", "header_metadata");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("header_schema","{\"type\":\"record\",\"name\":\"header_schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"sequence_number\",\"type\":\"long\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_end_date\",\"type\":\"string\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}"); //
        attributes.put("metadata_header_record","1");

        //set flow file content
        final String content ="abc.txt|01|12|6|20193112|20192912|20193012\n"+
                "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 0);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_FAILURE).get(0);

        final String expectedValidContents = "abc.txt|01|12|6|20193112|20192912|20193012\n"+
                "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        failFlowFile.assertContentEquals(expectedValidContents);

    }

    @Test   // addFileAndRecordID, header, no footer, RC location header_metadata_and_footer, with record_count in metadata schema mismatching with footer record_count.
    public void headerMetadataFooterSchemaRecordCountMismatchFail() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "header_metadata_and_footer");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("header_schema","{\"type\":\"record\",\"name\":\"header_schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"sequence_number\",\"type\":\"long\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_end_date\",\"type\":\"string\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}"); //
        attributes.put("metadata_header_record","1");

        //set flow file content
        final String content ="abc.txt|01|12|3|6|20193112|20192912|20193012\n"+
                "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "2\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 1);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 0);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_FAILURE).get(0);

        final String expectedValidContents = "abc.txt|01|12|3|6|20193112|20192912|20193012\n"+
                "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "2\n";
        failFlowFile.assertContentEquals(expectedValidContents);

    }



    @Test   // addFileAndRecordID, header, footer, RC location header_metadata_and_footer, with more elements in header_metadata than actual data
    public void headerMetadataDateHandlingWithoutDocSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "header_metadata_and_footer");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("header_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_header\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\",\"doc\":\"Type inferred from 'cbs_bc_customer_all_20190709_0_101_0_0.unl.gz'\"},{\"name\":\"file_size\",\"type\":\"long\",\"doc\":\"Type inferred from '58022'\"},{\"name\":\"record_count\",\"type\":\"long\",\"doc\":\"Type inferred from '715'\"},{\"name\":\"num_of_fields\",\"type\":\"long\",\"doc\":\"Type inferred from '37'\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}"); //
        attributes.put("metadata_header_record","1");

        //set flow file content
        final String content ="cbs_bc_customer_all_20191120_0_1021_0_0.unl.gz|127548|2|37|20191120|20191121022014\n"+
                "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "2\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        //runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 1);
        //runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 3);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "123|1|cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "123|2|cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

        Map<String, String> writeAttributes = successFlowFile.getAttributes();
        for (Map.Entry<String,String> entry : writeAttributes.entrySet())
            if(entry.getKey().contains("metadata"))
                System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());

    }

    @Test   // addFileAndRecordID, header, footer, RC location header_metadata_and_footer, with more elements in header_metadata than actual data
    public void headerMetadataDateHandlingWithDocSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "1");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "header_metadata_and_footer");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "123");
        attributes.put("field_separator", "|");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("header_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_header\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\",\"doc\":\"Type inferred from 'cbs_bc_customer_all_20190709_0_101_0_0.unl.gz'\"},{\"name\":\"file_size\",\"type\":\"long\",\"doc\":\"Type inferred from '58022'\"},{\"name\":\"record_count\",\"type\":\"long\",\"doc\":\"Type inferred from '715'\"},{\"name\":\"num_of_fields\",\"type\":\"long\",\"doc\":\"Type inferred from '37'\"},{\"name\":\"data_start_date\",\"type\":\"string\",\"doc\":\"yyyyMMdd\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\",\"doc\":\"yyyyMMddHHmmss\"}]}"); //
        attributes.put("metadata_header_record","1");

        //set flow file content
        final String content ="cbs_bc_customer_all_20191120_0_1021_0_0.unl.gz|127548|2|37|20191120|20191121022014\n"+
                "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "2\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        //runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 1);
        //runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 3);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_SUCCESS).get(0);

        final String expectedValidContents = "123|1|cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "123|2|cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n";
        successFlowFile.assertContentEquals(expectedValidContents);

        Map<String, String> writeAttributes = successFlowFile.getAttributes();
        for (Map.Entry<String,String> entry : writeAttributes.entrySet())
            if(entry.getKey().contains("metadata"))
                System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());

    }

    @Test   // addFileAndRecordID, header, footer, RC location header_metadata_and_footer, with more elements in header_metadata than actual data
    public void fileUuidOrIdSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "0");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "footer");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "uuid123");
        attributes.put("field_separator", "|");
        attributes.put("file_id", "12345");
        attributes.put("file_uuid_or_id", "file_id");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"ocs_bc_customer_manifest\",\"doc\":\"Schema\",\"fields\":[{\"name\":\"file_uuid\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"file_size\",\"type\":\"long\"},{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"num_of_fields\",\"type\":\"long\"},{\"name\":\"data_start_date\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\"}]}");

        //set flow file content
        final String content ="cbs_bc_customer_all_20191120_0_1021_0_0.unl.gz|127548|2|37|20191120|20191121022014\n"+
                "cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005\n" +
                "3\n";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        //runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 1);
        //runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 3);
        final MockFlowFile successFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_SUCCESS).get(0);

        final String expectedValidContents ="|1|cbs_bc_customer_all_20191120_0_1021_0_0.unl.gz|127548|2|37|20191120|20191121022014|12345\n" +
                "|2|cbs_bc_subscriber_add_20190918_0_1011_0_0.unl.gz|1395|20|32|20190918|20190919022005|12345\n" +
                "|3|cbs_bc_subscriber_add_20190918_0_1021_0_0.unl.gz|1395|20|32|20190918|20190919022005|12345\n";
        successFlowFile.assertContentEquals(expectedValidContents);

        Map<String, String> writeAttributes = successFlowFile.getAttributes();
        for (Map.Entry<String,String> entry : writeAttributes.entrySet())
                System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());

    }


    @Test   // addFileAndRecordID, header, no footer, RC location header_metadata_and_footer, with record_count in metadata schema mismatching with footer record_count.
    public void headerMetadataSchemaRecordCountMatchSuccess() throws InitializationException {
        //set flow file Attributes
        Map<String, String> attributes = new HashMap<>();
        attributes.put("file_name", "abc.txt");
        attributes.put("header_record_count", "2");
        attributes.put("footer_record_count", "1");
        attributes.put("record_count_location", "header_metadata_and_footer");
        attributes.put("record_count_filter", "(\\d*)");
        attributes.put("add_file_and_record_id", "1");
        attributes.put("conf_id", "1");
        attributes.put("file_uuid", "1abcd23");
        attributes.put("field_separator", "|");
        attributes.put("file_id", "123");
        attributes.put("file_uuid_or_id", "file_uuid");
        attributes.put("table_schema","{\"type\":\"record\",\"name\":\"schema\",\"namespace\":\"inferred.avro\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"Account_Number\",\"type\":\"string\",\"doc\":\"Type inferred from '971288201269'\"},{\"name\":\"Customer_Reference\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '971288201269'\",\"default\":null},{\"name\":\"Next_Bill_Date\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '09/012/2019'\",\"default\":null},{\"name\":\"Next_Bill_Sequence\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '9'\",\"default\":null},{\"name\":\"MSISDN\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'null'\",\"default\":null},{\"name\":\"Invoicing_Company_ID\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '1'\",\"default\":null},{\"name\":\"Charge_Type_Sequence\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '2'\",\"default\":null},{\"name\":\"Charge_Status\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'q'\",\"default\":null},{\"name\":\"Charge_Type\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'qzl Twml qhsrgl'\",\"default\":null},{\"name\":\"Charge_Amount\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '-12780'\",\"default\":null},{\"name\":\"Charge_Type_ID\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '1'\",\"default\":null},{\"name\":\"Charge_Type_Name\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'Lstl lsymlzt Fll'\",\"default\":null},{\"name\":\"Charge_Start_Date\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '28/012/2019'\",\"default\":null},{\"name\":\"Charge_End_Date\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'null'\",\"default\":null},{\"name\":\"Product_Sub_Type\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'null'\",\"default\":null},{\"name\":\"Revenue_Code_ID\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '7821612'\",\"default\":null},{\"name\":\"Revenue_Code_Name\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '1693930~l920~T999'\",\"default\":null},{\"name\":\"Tax_Percentage\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '0'\",\"default\":null},{\"name\":\"Charge_Sub_Type\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'qTq'\",\"default\":null},{\"name\":\"Tax_Inclusive_Flag\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'F'\",\"default\":null},{\"name\":\"Arrears_Flag\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'T'\",\"default\":null}]}");
        attributes.put("insert_table_schema","{\"type\":\"record\",\"name\":\"schema\",\"namespace\":\"inferred.avro\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"record_id\",\"type\":\"long\"},{\"name\":\"Account_Number\",\"type\":\"string\",\"doc\":\"Type inferred from '971288201269'\"},{\"name\":\"Customer_Reference\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '971288201269'\",\"default\":null},{\"name\":\"Next_Bill_Date\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '09/012/2019'\",\"default\":null},{\"name\":\"Next_Bill_Sequence\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '9'\",\"default\":null},{\"name\":\"MSISDN\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'null'\",\"default\":null},{\"name\":\"Invoicing_Company_ID\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '1'\",\"default\":null},{\"name\":\"Charge_Type_Sequence\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '2'\",\"default\":null},{\"name\":\"Charge_Status\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'q'\",\"default\":null},{\"name\":\"Charge_Type\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'qzl Twml qhsrgl'\",\"default\":null},{\"name\":\"Charge_Amount\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '-12780'\",\"default\":null},{\"name\":\"Charge_Type_ID\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '1'\",\"default\":null},{\"name\":\"Charge_Type_Name\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'Lstl lsymlzt Fll'\",\"default\":null},{\"name\":\"Charge_Start_Date\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '28/012/2019'\",\"default\":null},{\"name\":\"Charge_End_Date\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'null'\",\"default\":null},{\"name\":\"Product_Sub_Type\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'null'\",\"default\":null},{\"name\":\"Revenue_Code_ID\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '7821612'\",\"default\":null},{\"name\":\"Revenue_Code_Name\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '1693930~l920~T999'\",\"default\":null},{\"name\":\"Tax_Percentage\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from '0'\",\"default\":null},{\"name\":\"Charge_Sub_Type\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'qTq'\",\"default\":null},{\"name\":\"Tax_Inclusive_Flag\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'F'\",\"default\":null},{\"name\":\"Arrears_Flag\",\"type\":[\"null\",\"string\"],\"doc\":\"Type inferred from 'T'\",\"default\":null}]}");
        attributes.put("header_schema","{\"type\":\"record\",\"name\":\"header_schema\",\"fields\":[{\"name\":\"record_count\",\"type\":\"long\"},{\"name\":\"file_name\",\"type\":\"string\"},{\"name\":\"date_of_file_generation\",\"type\":\"string\",\"doc\":\"dd-MMM-yy,HH:mm:ss\"},{\"name\":\"data_start_date\",\"type\":\"string\",\"doc\":\"dd-MMM-yy\"},{\"name\":\"data_end_date\",\"type\":\"string\",\"doc\":\"dd-MMM-yy\"}]}"); //
        attributes.put("metadata_header_record","1");

        //set flow file content
        final String content ="13|CUK_FDH_RBM04_UNBILLED_REVENUE_NONUSAGE_20190329033639.dat|29-MAR-19,03:36:39|28-MAR-19|28-MAR-19\n" +
                "Account_Number|Customer_Reference|Next_Bill_Date|Next_Bill_Sequence|MSISDN|Invoicing_Company_ID|Charge_Type_Sequence|Charge_Status|Charge_Type|Charge_Amount|Charge_Type_ID|Charge_Type_Name|Charge_Start_Date|Charge_End_Date|Product_Sub_Type|Revenue_Code_ID|Revenue_Code_Name|Tax_Percentage|Charge_Sub_Type|Tax_Inclusive_Flag|Arrears_Flag\n" +
                "971288201269|971288201269|09/012/2019|9||1|2|q|qzl Twml qhsrgl|-12780|1|Lstl lsymlzt Fll|28/012/2019|||7821612|1693930~l920~T999|0|qTq|F|T\n" +
                "9712721207861|9712721207861|07/012/2019|9||1|2|q|qzl Twml qhsrgl|-12780|1|Lstl lsymlzt Fll|28/012/2019|||7821612|1693930~l920~T999|0|qTq|F|T\n" +
                "971299788197|971299788197|012/012/2019|18||2|2|q|qzl Twml qhsrgl|-12780|1|Lstl lsymlzt Fll|28/012/2019|||7821612|1693930~l920~T999|0|qTq|F|T\n" +
                "97177809607|97177809607|97/02/2019|79||2|1|q|qzl Twml qhsrgl|-12780|1|Lstl lsymlzt Fll|28/012/2019|||7821612|1693930~l920~T999|0|qTq|F|T\n" +
                "971288201269|971288201269|09/012/2019|9||1|12|q|qzl Twml qhsrgl|-12780|1|Lstl lsymlzt Fll|28/012/2019|||7821612|1693930~l920~T999|0|qTq|F|T\n" +
                "9712699781212|9712699781212|01/09/2019|11||1|9|q|qzl Twml qhsrgl|-12780|1|Lstl lsymlzt Fll|28/012/2019|||7821612|1693930~l920~T999|0|qTq|F|T\n" +
                "9712807877876|9712807877876|27/02/2019|6||1|9|q|qzl Twml qhsrgl|-12780|1|Lstl lsymlzt Fll|28/012/2019|||7821612|1693930~l920~T999|0|qTq|F|T\n" +
                "971280787772|9712807877876|27/02/2019|6||1|9|q|qzl Twml qhsrgl|-12780|1|Lstl lsymlzt Fll|28/012/2019|||7821612|1693930~l920~T999|0|qTq|F|T\n" +
                "9718780278678|9718780278678|09/09/2019|70||2|12|q|qzl Twml qhsrgl|-12780|1|Lstl lsymlzt Fll|28/012/2019|||7821612|1693930~l920~T999|0|qTq|F|T\n" +
                "9718811191|9718811191|01/09/2019|68||1|20|q|qzl Twml qhsrgl|-12780|1|Lstl lsymlzt Fll|28/012/2019|||7821612|1693930~l920~T999|0|qTq|F|T\n" +
                "97126078789612|97126078789612|01/09/2019|19||2|78|q|qzl Twml qhsrgl|-12780|1|Lstl lsymlzt Fll|28/012/2019|||7821612|1693930~l920~T999|0|qTq|F|T\n" +
                "9712607879782|9712607879782|01/09/2019|112||1|2|q|qzl Twml qhsrgl|-12780|1|Lstl lsymlzt Fll|28/012/2019|||7821612|1693930~l920~T999|0|qTq|F|T\n" +
                "97190916129|97190916129|09/09/2019|68||2|7|q|qzl Twml qhsrgl|-12780|1|Lstl lsymlzt Fll|28/012/2019|||7821612|1693930~l920~T999|0|qTq|F|T\n" +
                "13";

        //create inflow file with attributes
        runner.enqueue(content, attributes);

        //run the test
        runner.run();

        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_FAILURE, 0);
        runner.assertTransferCount(MDDIFDataOnlyValidator.REL_SUCCESS, 1);
        //runner.assertTransferCount(MDDIFDataOnlyValidator.LOG_RELATIONSHIP, 1);
        final MockFlowFile failFlowFile = runner.getFlowFilesForRelationship(MDDIFDataOnlyValidator.REL_SUCCESS).get(0);


    }


}